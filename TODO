### 1. Core UI & UX for Model Building (In Progress)

**Implemented:**
- Drag-and-drop functionality for designing ML models.
- Node creation with connection circles and toggleable visual formats (rectangular/circular).
- Basic menu system and context menus for adding inputs, outputs, and hidden layers.
- Editable node properties such as activation function and bias settings.

**Next Steps:**
- Refine real-time visual feedback (e.g., dynamic connection highlighting, smoother node interactions).

---

### 2. Model Persistence & Loading (Partially Implemented)

**Implemented:**
- Basic project saving and loading using serialization (pickle).

**Next Steps:**
- Improve data structures for model parameters to support scalability.

---

### 3. Customizable ML Components (Planned)

**Goal:**
- Expand support for core ML components including normalization, dropout, and additional activation functions.

**Next Steps:**
- Implement batch normalization and dropout layers.
- Extend activation function support to include more advanced and custom functions.
- Allow users to define and integrate custom layers.

---

### 4. Training & Evaluation Pipeline (Basic Implementation, Enhancement Planned)

**Implemented:**
- Forward and backward propagation routines with support for basic optimizers (SGD and Adam).
- Console output displaying training loss over epochs.

**Next Steps:**
- Integrate real-time visualization of training metrics within the UI.
- Develop interactive performance graphs and advanced evaluation metrics.

---

### 5. Exporting & Compatibility (Planned)

**Goal:**
- Export models in formats compatible with external tools (e.g., ONNX, TensorFlow) and enable integration with Godot.

**Next Steps:**
- Develop model conversion utilities for standard formats.
